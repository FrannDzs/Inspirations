buildscript {
    repositories {
        maven { url = "https://files.minecraftforge.net/maven" }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'maven'
apply plugin: 'maven-publish'

group = "knightminer"
archivesBaseName = "Inspirations"

// External properties
ext.configFile = file "build.properties"
configFile.withReader {
    // Load config.  It shall from now be referenced as simply config or project.config
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}
configurations {
    deployerJars
}

version = "${config.minecraft_version}-${config.mod_version}"
//adds the build number to the end of the version string if on a build server
if (System.getenv().BUILD_NUMBER != null) {
	version += ".${System.getenv().BUILD_NUMBER}"
}

sourceSets {
    main {
        resources {
            srcDirs = [
                    "$rootDir/src/main/resources",
                    "$rootDir/src/generated/resources"
            ]
        }
    }
}

minecraft {
	mappings channel: 'snapshot', version: config.mappings_version

    accessTransformer project.file("src/main/resources/META-INF/accesstransformer.cfg")

     runs {
         client {
             workingDirectory project.file('run')

             // Recommended logging data for a userdev environment
             property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

             // Recommended logging level for the console
             property 'forge.logging.console.level', 'debug'

             mods {
                 inspirations {
                     source sourceSets.main
                 }
             }
         }

         server {
             workingDirectory project.file('run')

             // Recommended logging data for a userdev environment
             property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

             // Recommended logging level for the console
             property 'forge.logging.console.level', 'debug'

             mods {
                 inspirations {
                     source sourceSets.main
                 }
             }
         }

         data {
             workingDirectory project.file('run')

             // Recommended logging data for a userdev environment
             property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

             // Recommended logging level for the console
             property 'forge.logging.console.level', 'debug'

             args '--mod', 'inspirations', '--all', '--output', file('src/generated/resources/')

             mods {
                 inspirations {
                     source sourceSets.main
                 }
             }
         }
     }
}

sourceCompatibility = targetCompatibility = "1.8" // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = "1.8"
}

repositories {
    maven { // Mantle and JEI
        name 'DVS1 Maven FS'
        url 'https://dvs1.progwml6.com/files/maven'
    }
	maven { // TOP
        name 'tterrag maven'
        url "https://maven.tterrag.com/"
    }
    maven {
        url = "https://www.cursemaven.com"
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${config.minecraft_version}-${config.forge_version}"
    
    // compile against the JEI API but do not include it at runtime
    compileOnly fg.deobf("mezz.jei:jei-${config.minecraft_version}:${config.jei_version}:api")
    // at runtime, use the full JEI jar
    runtimeOnly fg.deobf("mezz.jei:jei-${config.minecraft_version}:${config.jei_version}")

    compile fg.deobf("slimeknights.mantle:Mantle:${config.minecraft_version}-${config.mantle_version}")

    // rats plugin
    //runtimeOnly fg.deobf("curse.maven:citadel:2992577")
    //runtimeOnly fg.deobf("curse.maven:rats:3041056")
}

jar {
    manifest {
        attributes([
            "Specification-Title": "Inspirations",
            "Specification-Vendor": "KnightMiner",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor": "KnightMiner",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

// because the normal output has been made to be obfuscated
task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    classifier = 'sources'
}

artifacts {
    archives sourcesJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
            artifact sourcesJar
        }
    }

    repositories {
        if (project.hasProperty('DEPLOY_DIR')) {
            maven { url DEPLOY_DIR }
        }
    }
}